
#Testing instructions from table B (These instruction sets are written by hand):

#JAL
JAL x1, 12
Addi x4, x0, 0
Addi x2, x0, -1
Addi x3, x0, 2047

Sub x7, x2, x0
Sub x8, x3, x2
Jal x1, 4
Add x4, x0, x1 #Should be skipped
Add x5, x1, x2 #Should be skipped
Add x6, x2, x3

#JALR
Addi x4, x0,  0
Jalr  x2,  x4, 4
Addi x2, x0, -1
Addi x3, x0, 2047

Sub x7, x2, x0
Sub x8, x3, x2
JALR x7, x8, 0
Add x4, x0, x1 
Add x5, x1, x2 
Add x6, x2, x3

#SB
#Storing a normal number
or x2, x2, x2
add x3, x3, x2
SB x2, 0(x3)

#Should store a truncated value (byte = not enough space)
addi x3, x0, -1
addi x4,x0, 10
SB x3, 0(x4)   

#Testing forwarding
addi x3, x0, -1
addi x4,x0, 10
SB x3, 0(x4)   
add x2, x3, x4

#Testing a not value store
Addi x2, x0, -1
Addi x3, x0, 2
SB x2, 32(x2)

#SW
#Storing a normal number
or x2, x2, x2
add x3, x3, x2
SW x2, 0(x3)

#Should store a truncated value
add x3, x0, -1
addi x4,x0, 10
SW x3, 0(x4)   

#Testing forwarding
add x3, x0, -1
addi x4,x0, 10
SW x3, 0(x4)   
add x2, x3, x4

#Testing a not value store
Addi x2, x0, -1
Addi x3, x0, 2
SW x2, 32(x2)

#LB
#Loading a byte
addi x2, x0,2
sb x2, 0(x3)
add x5, x3, x2
add x5, x3, x2
add x5, x3, x2
add x5, x3, x2
lb x4, 0(x3)

#Loading a byte directly after being stored
addi x2, x0, 1
add x3, x3, x2
sb x2, 0(x3)
lb x4, 0(x3)

#Load neg byte
addi x2, x2, 1
addi x3, x3, -8
sb x3, 0(x2)
lb x4, 0(x2)

#Load out of range byte (nothing should happen) 
addi x2, x0, 1
addi x3, x3, -8
sb x3, 0(x2)
lb x1, 0(x3)

#Lw
#Loading a word
addi x2, x0, 1
sb x2, 0(x3)
add x3, x3, x2
add x3, x3, x2
add x3, x3, x2
add x3, x3, x2
lw x4, 0(x2)

#loading a word directly after being stored
addi x2, x0, 1
add x3, x3, x2
sw x2, 0(x3)
lw x4, 0(x3)

#Load neg word
addi x2, x0, 0
addi x3, x3, -8
sw x3, 0(x2)
lw x4, 0(x2)

#Load out of range byte (nothing should happen) 
addi x2, x0, 0
addi x3, x3, -8
sw x3, 0(x2)
lw x1, 0(x3)

#General load
#load use stall 
addi x2, x0, 4
addi x3, x3, 4
sw x3, 0(x2)
lw x1, 0(x3)
add x8, x1, x1

#stalls
#Making sure AUIPC doesnt stall
addi x1, x0, 2
addi x2, x0, 3
sw x1, 0(x2)
lw x4, 0(x2)
AUIPC x5, 1

#Making sure JAL doesnt stall
addi x1, x0, 2
addi x2, x0, 3
sw x1, 0(x2)
lw x4, 0(x2)
jal x5, 1

#Making sure ADDI doesnt stall
addi x1, x0, 2
addi x2, x0, 3
sw x1, 0(x2)
lw x4, 0(x2)
addi x5, x1, 1

#Making sure JALR doesnt stall
addi x1, x0, 2
addi x2, x0, 3
sb x1, 0(x2)
lb x4, 0(x2)
jalr x5, x1, 1

#Making sure LW doesnt stall
addi x1, x0, 2
addi x2, x0, 3
sb x1, 0(x2)
lb x4, 0(x2)
lw x5, 0(x1)

#Making sure LB doesnt stall

addi x1, x0, 2
addi x2, x0, 3
sb x1, 0(x2)
lb x4, 0(x2)
lb x5, 0(x1)

#Branch testing

addi x1, x0, 2
addi x2, x0, 3
addi x3, x1, 0

#BNE
bne x1, x1, Branch1
bne x1, x2, Branch1

#BEQ
beq x1, x1, Branch2
beq x1, x2, Branch2

#BLT
blt x2, x3, Branch3
blt x3, x2, Branch3

#BGE
bge x3, x2, Branch4
bge x2, x3, Branch4

addi x1, x0, -2
addi x2, x0, -3
addi x3, x1, 0

#BLTU
bltu x2, x3, Branch5
bltu x2, x3, Branch5

#BGEU
bgeu x1, x1, Branch6
bgeu  x1, x2, Branch6

#Depending if the branch is taken or not these should turn into cops
Branch1:
addi x1, x0, 1
addi x2, x0, 2
addi x3, x1, 3

Branch2:
addi x1, x0, 4
addi x2, x0, 5
addi x3, x1, 6

Branch3:
addi x1, x0, 7
addi x2, x0, 8
addi x3, x1, 9

Branch4:
addi x1, x0, 10
addi x2, x0, 11
addi x3, x1, 12

Branch5:
addi x1, x0, 13
addi x2, x0, 14
addi x3, x1, 15

Branch6:
addi x1, x0, 16
addi x2, x0, 17
addi x3, x1, 18


## Test Table A With Load/Use Hazard ##
# Don't need to test all Table A Ops. Goal of this section
# is to verify that table A Ops work with load/use
addi x2, x2, 4
addi x7, x2, 4
sw x2, 0(x7)
sw x7, 0(x2)
lw x7, 0(x2)
lw x2, 0(x7)

addi x2, x2, 4
addi x7, x2, 4
sb x2, 0(x7)
sb x7, 0(x2)
lb x7, 0(x2)
lb x2, 0(x7)
And x1, x2, x0

## Test Table A With Forwarding Hazards ##
# Don't need to test all Table A Ops. Goal of this section
# is to verify that table A Ops work with forwarding

Sub x7, x2, x7
Sub x7, x3, x2
Sub x2, x7, x5

Add x4, x0, x1
Add x5, x1, x1
Add x6, x1, x1

And x10, x1, x4
And x4, x4, x7
And x7, x4, x5

#Testing instructions from table a (These instructions are computer generated randomly):
Auipc x6, 158368
xori x30, x28, -1615
xori x18, x30, -748
and x9, x29, x1
and x1, x9, x19
and x1, x11, x9
addi x11, x30, 1259
addi x13, x11, -1287
slt x26, x4, x23
slt x8, x26, x24
slt x25, x12, x26
slt x25, x27, x19
slt x30, x25, x11
slt x13, x0, x25
Auipc x9, 488018
slli x23, x30, 30
slli x1, x23, 17
lui x26, 152326
sra x25, x20, x16
sra x5, x12, x25
sra x0, x25, x13
lui x7, -94904
Auipc x6, 291522
xori x1, x13, -696
xori x4, x1, -1268
xori x24, x23, -80
xori x22, x24, -305
Auipc x1, 294541
lui x12, -523882
slli x24, x26, 9
slli x9, x24, 9
Auipc x9, -112444
sltiu x6, x10, -153
sltiu x25, x6, -3
srli x2, x29, 10
srli x1, x2, 0
Auipc x27, 59834
lui x28, 474783
slt x15, x19, x26
slt x18, x18, x15
slt x19, x15, x13
ori x20, x31, -784
ori x28, x20, -1270
lui x4, 58282
Auipc x13, -246900
sra x22, x6, x20
sra x13, x16, x22
sra x24, x22, x11
Auipc x8, -475029
lui x3, 470270
slli x22, x8, 19
slli x15, x22, 6
Auipc x13, 312019
Auipc x23, -112358
add x28, x9, x10
add x24, x28, x31
add x26, x23, x28
lui x31, -431853
Auipc x20, -444212
lui x3, 32473
lui x5, -297267
ori x4, x24, 467
ori x12, x4, -1771
ori x3, x7, -984
ori x8, x3, 364
lui x12, 339182
Auipc x7, -2794
sltu x5, x14, x16
sltu x30, x5, x5
sltu x18, x5, x4
andi x5, x22, 1284
andi x0, x5, 695
Auipc x2, 38501
slt x8, x6, x28
slt x26, x8, x31
slt x28, x16, x8
ori x24, x11, -1005
ori x1, x24, 637
sra x21, x16, x11
sra x16, x24, x21
sra x13, x21, x13
xori x19, x9, 31
xori x15, x19, -647
srl x29, x8, x23
srl x26, x29, x0
srl x4, x25, x29
srai x10, x18, 30
srai x28, x10, 28
add x20, x31, x14
add x31, x20, x19
add x23, x14, x20
lui x22, -441615
slti x7, x21, -1487
slti x30, x7, 1674
lui x29, 279018
Auipc x4, 421182
Auipc x19, -318350
add x9, x24, x12
add x0, x10, x9
add x4, x9, x31
lui x14, 25624
sra x4, x14, x16
sra x16, x4, x30
sra x15, x2, x4
Auipc x2, 288843
slt x19, x23, x6
slt x9, x19, x22
slt x2, x11, x19
srai x0, x19, 19
srai x17, x0, 4
sltu x25, x1, x23
sltu x15, x25, x23
sltu x18, x29, x25
srai x25, x15, 2
srai x25, x25, 0
srli x15, x30, 1
srli x13, x15, 21
lui x17, -213830
lui x11, -318407
slli x11, x10, 6
slli x11, x11, 22
Auipc x2, 82210
or x23, x11, x15
or x14, x23, x8
or x1, x6, x23
xori x6, x23, 629
xori x18, x6, 828
sltu x8, x21, x21
sltu x24, x8, x24
sltu x1, x10, x8
sra x29, x2, x22
sra x26, x29, x15
sra x11, x0, x29
lui x24, 140234
Auipc x12, 135229
or x0, x10, x11
or x13, x0, x9
or x3, x10, x0
Auipc x16, 16015
